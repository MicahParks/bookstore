// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BookCSVHandlerFunc turns a function with the right signature into a book c s v handler
type BookCSVHandlerFunc func(BookCSVParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookCSVHandlerFunc) Handle(params BookCSVParams) middleware.Responder {
	return fn(params)
}

// BookCSVHandler interface for that can handle valid book c s v params
type BookCSVHandler interface {
	Handle(BookCSVParams) middleware.Responder
}

// NewBookCSV creates a new http.Handler for the book c s v operation
func NewBookCSV(ctx *middleware.Context, handler BookCSVHandler) *BookCSV {
	return &BookCSV{Context: ctx, Handler: handler}
}

/* BookCSV swagger:route POST /api/csv api bookCSV

Get a CSV file for the Book data and most recent Status data of all books.

*/
type BookCSV struct {
	Context *middleware.Context
	Handler BookCSVHandler
}

func (o *BookCSV) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookCSVParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
