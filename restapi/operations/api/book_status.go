// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BookStatusHandlerFunc turns a function with the right signature into a book status handler
type BookStatusHandlerFunc func(BookStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookStatusHandlerFunc) Handle(params BookStatusParams) middleware.Responder {
	return fn(params)
}

// BookStatusHandler interface for that can handle valid book status params
type BookStatusHandler interface {
	Handle(BookStatusParams) middleware.Responder
}

// NewBookStatus creates a new http.Handler for the book status operation
func NewBookStatus(ctx *middleware.Context, handler BookStatusHandler) *BookStatus {
	return &BookStatus{Context: ctx, Handler: handler}
}

/* BookStatus swagger:route POST /api/status api bookStatus

Get the checked in or checked out status for the given books.

*/
type BookStatus struct {
	Context *middleware.Context
	Handler BookStatusHandler
}

func (o *BookStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookStatusParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
