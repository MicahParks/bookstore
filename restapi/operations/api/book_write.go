// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/MicahParks/bookstore/models"
)

// BookWriteHandlerFunc turns a function with the right signature into a book write handler
type BookWriteHandlerFunc func(BookWriteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookWriteHandlerFunc) Handle(params BookWriteParams) middleware.Responder {
	return fn(params)
}

// BookWriteHandler interface for that can handle valid book write params
type BookWriteHandler interface {
	Handle(BookWriteParams) middleware.Responder
}

// NewBookWrite creates a new http.Handler for the book write operation
func NewBookWrite(ctx *middleware.Context, handler BookWriteHandler) *BookWrite {
	return &BookWrite{Context: ctx, Handler: handler}
}

/* BookWrite swagger:route POST /api/books/{operation} api bookWrite

Insert, update, or upsert books to the library.

*/
type BookWrite struct {
	Context *middleware.Context
	Handler BookWriteHandler
}

func (o *BookWrite) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookWriteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// BookWriteParamsBodyAnon book write params body anon
//
// swagger:model BookWriteParamsBodyAnon
type BookWriteParamsBodyAnon struct {

	// book
	Book models.Book `json:"book,omitempty"`

	// quantity
	Quantity uint64 `json:"quantity,omitempty"`
}

// Validate validates this book write params body anon
func (o *BookWriteParamsBodyAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBook(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BookWriteParamsBodyAnon) validateBook(formats strfmt.Registry) error {
	if swag.IsZero(o.Book) { // not required
		return nil
	}

	if err := o.Book.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("book")
		}
		return err
	}

	return nil
}

// ContextValidate validate this book write params body anon based on the context it is used
func (o *BookWriteParamsBodyAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BookWriteParamsBodyAnon) contextValidateBook(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Book.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("book")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BookWriteParamsBodyAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BookWriteParamsBodyAnon) UnmarshalBinary(b []byte) error {
	var res BookWriteParamsBodyAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
