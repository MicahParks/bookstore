// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewBookWriteParams creates a new BookWriteParams object
//
// There are no default values defined in the spec.
func NewBookWriteParams() BookWriteParams {

	return BookWriteParams{}
}

// BookWriteParams contains all the bound params for the book write operation
// typically these are obtained from a http.Request
//
// swagger:parameters bookWrite
type BookWriteParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The mapping of ISBNs to books and their quantities to insert, update, or upsert to the library.
	  Required: true
	  In: body
	*/
	BookQuantities map[string]BookWriteParamsBodyAnon
	/*The write operation to perform with the book data.
	  Required: true
	  In: path
	*/
	Operation string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewBookWriteParams() beforehand.
func (o *BookWriteParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body map[string]BookWriteParamsBodyAnon
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("bookQuantities", "body", ""))
			} else {
				res = append(res, errors.NewParseError("bookQuantities", "body", "", err))
			}
		} else {
			// validate map of body objects
			for k := range body {
				if val, ok := body[k]; ok {
					if err := val.Validate(route.Formats); err != nil {
						res = append(res, err)
						break
					}
				}
			}

			if len(res) == 0 {
				o.BookQuantities = body
			}
		}
	} else {
		res = append(res, errors.Required("bookQuantities", "body", ""))
	}

	rOperation, rhkOperation, _ := route.Params.GetOK("operation")
	if err := o.bindOperation(rOperation, rhkOperation, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOperation binds and validates parameter Operation from path.
func (o *BookWriteParams) bindOperation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Operation = raw

	if err := o.validateOperation(formats); err != nil {
		return err
	}

	return nil
}

// validateOperation carries on validations for parameter Operation
func (o *BookWriteParams) validateOperation(formats strfmt.Registry) error {

	if err := validate.EnumCase("operation", "path", o.Operation, []interface{}{"insert", "update", "upsert"}, true); err != nil {
		return err
	}

	return nil
}
